---
# Playbook for maintaining fallback public jupyterhub training server
# Ensure https_letsencrypt_enabled is set to True in production to
# ensure certbot handles the letsencrypt certificate setup

- hosts: ome-training-jh.openmicroscopy.org

  roles:

  - role: ome.docker
    docker_additional_options:
      # WARNING: This disables the default docker network forwarding rules
      # so we can restrict outgoinng connections from JupyterHub servers,
      # but this means we must manually configure everything
      iptables: False


- hosts: ome-training-jh.openmicroscopy.org
  # Separate playbook to force refresh of facts (including docker network
  # interface)
  pre_tasks:

  - name: Refresh facts
    setup:

  roles:

  - role: idr.idr_jupyter
    idr_jupyter_prefix: /training
    idr_jupyter_authenticator: tmpauthenticator.TmpAuthenticator
    idr_jupyter_cull_options:
    - --timeout=300
    - --max-age=86400
    - --cull-users
    idr_jupyter_hub_log_level: INFO
    # Allow any username
    idr_jupyter_users: []
    # No admins
    idr_jupyter_admins: []
    #idr_jupyter_pull_latest: True
    idr_jupyter_notebook_image: "{{ idr_jupyter_notebook_image_override | default('openmicroscopy/training-notebooks:0.7.2') }}"
    idr_jupyter_additional_config:
      Spawner.mem_limit: 2G

  # Setup up iptables to restrict anonymous jupyterhub users
  - role: ome.iptables_raw

  tasks:

  # Allow:
  # - all established/related in/out
  # - all internal localhost connections
  # - ICMP echo (ping)
  # - ssh incoming connections
  - name: Iptables ssh and related
    become: yes
    iptables_raw_25:
      name: ssh_and_established
      keep_unmanaged: no
      rules: |
        -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
        -A INPUT -i lo -j ACCEPT
        -A OUTPUT -o lo -j ACCEPT
        -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
        -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
      state: present
      # Highest priority
      weight: 0

  # Use a low priority REJECT rule so that clients can detect when
  # they've been rejected
  # The alternative of setting a default DROP policy will leave them
  # hanging until they timeout, though this may be preferable for public
  # servers:
  # http://www.chiark.greenend.org.uk/~peterb/network/drop-vs-reject
  - name: Iptables default
    become: yes
    iptables_raw_25:
      name: default_reject
      rules: |
        -A INPUT -j REJECT
        -A FORWARD -j REJECT
        -A OUTPUT -j ACCEPT
      state: present
      # Lowest priority
      weight: 99

  # All other ports that allow incoming connections:
  # - web
  # - jupyterhub
  - name: JupyterHub incoming
    become: yes
    iptables_raw_25:
      name: jupyterhub_incoming
      rules: |
        -A INPUT -p tcp -m multiport --dports 80,443,8000,8081 -j ACCEPT
        -A INPUT -p tcp -m tcp --dport 6556 -j ACCEPT
      state: present

  # Block all other output from docker containers apart from:
  # - DNS udp
  # - OMERO/web tcp to EBI/UoD
  # https://docs.docker.com/network/iptables/
  # TODO: We should move the EBI IDR ports into a common configuration file
  # e.g. idr.openmicroscopy.org/connection/omero-client-ports.json
  - name: JupyterHub Docker outgoing ports
    become: yes
    iptables_raw_25:
      name: jupyterhub_outgoing
      rules: |
        -A FORWARD -i docker0 ! -o docker0 -p udp -m udp --dport 53 -j ACCEPT
        -A FORWARD -i docker0 ! -o docker0 -p tcp -m multiport --dports {{ jupyterhub_training_docker_tcp_dports | join(',') }} -d 193.60.0.0/14 -j ACCEPT
        -A FORWARD -i docker0 ! -o docker0 -p tcp -m multiport --dports {{ jupyterhub_training_docker_tcp_dports | join(',') }} -d 134.36.0.0/16 -j ACCEPT
      state: present

  - name: JupyterHub Docker masquerade
    become: yes
    iptables_raw_25:
      keep_unmanaged: no
      name: jupyterhub_outgoing
      rules: |
        -A POSTROUTING -s {{ jupyterhub_training_docker_source }} ! -o docker0 -j MASQUERADE
      state: present
      table: nat

  vars:
    jupyterhub_training_docker_source: "{{ ansible_docker0.ipv4.network }}/{{ ansible_docker0.ipv4.netmask }}"
    jupyterhub_training_docker_tcp_dports:
    - 80
    - 443
    - 4063
    - 4064
    - 14060
    - 14061


- hosts: ome-training-jh.openmicroscopy.org
  # Separate playbook because bootstrapping letsencrypt is complicated.
  # We need to run a web server for the certbot validation before the
  # certificates exist.
  # We could use the standalone server but that would result in nginx
  # being stopped during renewals instead of just being reloaded
  pre_tasks:

  - name: Check whether letsencrypt needs to be initialised
    become: yes
    stat:
      path: "{{ https_letsencrypt_cert_path }}/cert.pem"
    register: _letsencrypt_certs

  - name: lentsencrypt challenge directory
    become: yes
    file:
      path: /srv/www/letsencrypt/.well-known/
      recurse: yes
      state: directory
      mode: 0644

  roles:

  - role: ome.ssl_certificate
    when: not (https_letsencrypt_enabled | default(False))

  # This is needed because we attempt to stop/start nginx in certbot, so
  # it needs to be installed even if it's not used
  - role: ome.nginx

  # Lets encrypt with automatic renewal
  # This will stop nginx when the certificate is first created
  # For renewals we will configure Nginx to server the challenge
  - role: ome.certbot
    become: yes
    certbot_create_if_missing: yes
    certbot_admin_email: sysadmin@openmicroscopy.org
    certbot_domains:
    - "{{ https_certificate_domain }}"
    certbot_create_standalone_stop_services:
    - nginx
    certbot_auto_renew_deploy_hooks:
    - systemctl reload nginx
    certbot_auto_renew_args: --webroot --webroot-path /srv/www/letsencrypt/
    # May be useful for testing:
    #certbot_create_args: --test-cert
    #certbot_auto_renew_args: --test-cert --force-renewal --webroot --webroot-path /srv/www/letsencrypt/
    # WARNING: If you have a test certificate and need to convert it to a
    # real certificate you may need to run
    #   rm -rf /etc/letsencrypt/*
    when: https_letsencrypt_enabled | default(False)

  - role: ome.nginx_proxy
    #nginx_proxy_force_ssl: True
    nginx_proxy_ssl: True
    nginx_proxy_ssl_certificate: >-
      "{{ (https_letsencrypt_enabled | default(False)) |
      ternary(https_letsencrypt_cert_path + '/fullchain.pem',
      ssl_certificate_public_path) }}"
    nginx_proxy_ssl_certificate_key: >-
      "{{ (https_letsencrypt_enabled | default(False)) |
      ternary(https_letsencrypt_cert_path + '/privkey.pem',
      ssl_certificate_key_path) }}"
    nginx_proxy_direct_locations:
    # Required for renewals
    - location: /.well-known/
      alias: /srv/www/letsencrypt/.well-known/
    nginx_proxy_websockets_enable: True
    nginx_proxy_backends:
    - name: next-web
      location: /training/
      server: http://127.0.0.1:8000
      websockets: True
      read_timeout: 86400
      host_header: "$host"

  handlers:
    - name: reload nginx
      listen: ssl certificate changed
      become: true
      service:
        name: nginx
        state: reloaded

  vars:
    https_certificate_domain: outreach-analysis.openmicroscopy.org
    # This must match the expectations of certbot, do not change this:
    https_letsencrypt_cert_path: /etc/letsencrypt/live/{{ https_certificate_domain }}
    # In production set this to True:
    # https_lets_encrypt_enabled:
